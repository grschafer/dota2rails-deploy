# {{ ansible_managed }}

from __future__ import absolute_import
from datetime import timedelta
from celery.schedules import crontab

BROKER_URL = CELERY_RESULT_BACKEND = \
        '{{ rabbitmq.transport }}://{{ rabbitmq.user }}:{{ rabbitmq.pass }}@{{ rabbitmq.host }}:{{ rabbitmq.port }}/{{ rabbitmq.vhost }}/'

CELERY_IMPORTS = ['alacrity.mq.tasks']

CELERY_ACCEPT_CONTENT = ['json']

CELERY_TASK_SERIALIZER = 'json' # default: 'pickle'
CELERY_RESULT_SERIALIZER = 'json' # default: 'pickle'

# remove results and result queues 1 hour after completion
# shouldn't affect groups/chains even if worker is held up
# because the results of one step are stored as arguments of the next
#CELERY_TASK_RESULT_EXPIRES = 30 # time in seconds or timedelta

#CELERY_IGNORE_RESULT = True # need results for .get() and chords?

# long-running tasks, so we want them to spread evenly among workers
CELERYD_PREFETCH_MULTIPLIER = 1 # default: 4

#CELERY_TIMEZONE = 'US/Mountain' # requires pytz
CELERY_ENABLE_UTC = True

#CELERY_DEFAULT_RATE_LIMIT = '1/m'

CELERYBEAT_SCHEDULE = {
        'find new matches': {
            'task': 'alacrity.mq.tasks.league_match_workflow',
            'schedule': crontab(minute='*/30', hour='*'),
        },
        'process user uploaded matches': {
            'task': 'alacrity.mq.tasks.user_replay_workflow',
            'schedule': crontab(minute='*/15', hour='*'),
        },
        'update leagues': {
            'task': 'alacrity.mq.tasks.update_leagues',
            'schedule': crontab(minute=0, hour=0),
        },
}

CELERY_SEND_TASK_ERROR_EMAILS = True

#ADMINS = [('Name', 'name@example.com')]
ADMINS = [ \
  {% for admin in email.admins %}
    ("{{ admin.name }}", "{{ admin.address }}"),
  {% endfor %}
]

# Email address used as sender (From field).
SERVER_EMAIL = "{{ email.address }}"

# Mailserver configuration
EMAIL_HOST = "{{ email.host }}"
EMAIL_PORT = {{ email.port }}
EMAIL_HOST_USER = "{{ email.user }}"
EMAIL_HOST_PASSWORD = "{{ email.pass }}"
EMAIL_USE_SSL = {{ email.use_ssl }}
#EMAIL_USE_TLS = True
